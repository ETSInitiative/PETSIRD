% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef BulkMaterial < handle
  % Specification of materials used in the scanner.
  % TODO agree with vendors if this information can be supplied and to what accuracy
  % Ideally this list should be reasonably accurate to be useful for Monte Carlo simulations, but can be approximate.
  properties
    % unique id that can be used to refer to the material in voxelised maps etc
    id
    % informative string, not standardised.
    % Expected examples:
    % detecting: BGO, LSO, LYSO, LaBr, GAGG, plastic
    % non-detecting: tungsten, lead
    name
    % density of the material
    % Units: g/cc
    density
    % List of atoms
    atoms
    % List of massFractions for the atoms.
    % constraint: sum of massFractions should be 1
    % constraint:  size(atoms) == size(massFractions)
    mass_fractions
  end

  methods
    function self = BulkMaterial(kwargs)
      arguments
        kwargs.id = uint32(0);
        kwargs.name = "";
        kwargs.density = single(0);
        kwargs.atoms = petsird.Atom.empty();
        kwargs.mass_fractions = single.empty();
      end
      self.id = kwargs.id;
      self.name = kwargs.name;
      self.density = kwargs.density;
      self.atoms = kwargs.atoms;
      self.mass_fractions = kwargs.mass_fractions;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "petsird.BulkMaterial") && ...
        isequal({self.id}, {other.id}) && ...
        isequal({self.name}, {other.name}) && ...
        isequal({self.density}, {other.density}) && ...
        isequal({self.atoms}, {other.atoms}) && ...
        isequal({self.mass_fractions}, {other.mass_fractions});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = petsird.BulkMaterial();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
