% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef ReplicatedObject < handle
  % A list of identical objects at different locations
  properties
    object
    % list of transforms
    % constraint: length >= 1
    transforms
    % list of unique ids for every replicated solid volume
    % constraint: size(transforms) == size(ids)
    ids
  end

  methods
    function self = ReplicatedObject(kwargs)
      arguments
        kwargs.object;
        kwargs.transforms = petsird.RigidTransformation.empty();
        kwargs.ids = uint32.empty();
      end
      if ~isfield(kwargs, "object")
        throw(yardl.TypeError("Missing required keyword argument 'object'"))
      end
      self.object = kwargs.object;
      self.transforms = kwargs.transforms;
      self.ids = kwargs.ids;
    end

    function res = number_of_objects(self)
      res = length(self.transforms);
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "petsird.ReplicatedObject") && ...
        isequal({self.object}, {other.object}) && ...
        isequal({self.transforms}, {other.transforms}) && ...
        isequal({self.ids}, {other.ids});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = petsird.ReplicatedObject(object=yardl.None);
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
