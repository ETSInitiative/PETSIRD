% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef AnnulusShape < handle
  % Annulus of certain thickness centered at [0,0,0] and oriented along the [0,0,1] axis
  % in radians. An angle of 0 corresponds to the [1,0,0] axis, Pi/2 corresponds to the [0,1,0] axis.
  properties
    % inner radius (in mm)
    inner_radius
    % outer radius (in mm)
    outer_radius
    % thickness of the annulus, i.e. length along the axis (in mm)
    thickness
    % start-stop angle (in radians)
    angular_range
  end

  methods
    function self = AnnulusShape(kwargs)
      arguments
        kwargs.inner_radius = single(0);
        kwargs.outer_radius = single(0);
        kwargs.thickness = single(0);
        kwargs.angular_range = repelem(single(0), 2);
      end
      self.inner_radius = kwargs.inner_radius;
      self.outer_radius = kwargs.outer_radius;
      self.thickness = kwargs.thickness;
      self.angular_range = kwargs.angular_range;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "petsird.AnnulusShape") && ...
        isequal({self.inner_radius}, {other.inner_radius}) && ...
        isequal({self.outer_radius}, {other.outer_radius}) && ...
        isequal({self.thickness}, {other.thickness}) && ...
        isequal({self.angular_range}, {other.angular_range});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = petsird.AnnulusShape();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
