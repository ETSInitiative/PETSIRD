% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef DetectorModule < handle
  % Top-level detector structure, consisting of one or more lists of detecting elements (or "crystals")
  % This allows having different types of detecting elements (e.g. for phoswich detectors)
  % TODO this could be made into a hierarchical structure
  properties
    detecting_elements
    % list of unique ids for every replicated solid volume
    % constraint: size(detectingElements) == size(detectingElementsIds)
    detecting_element_ids
    % optional list describing shielding/optical reflectors etc
    non_detecting_elements
  end

  methods
    function self = DetectorModule(kwargs)
      arguments
        kwargs.detecting_elements = petsird.ReplicatedBoxSolidVolume.empty();
        kwargs.detecting_element_ids = uint32.empty();
        kwargs.non_detecting_elements = petsird.ReplicatedGenericSolidVolume.empty();
      end
      self.detecting_elements = kwargs.detecting_elements;
      self.detecting_element_ids = kwargs.detecting_element_ids;
      self.non_detecting_elements = kwargs.non_detecting_elements;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "petsird.DetectorModule") && ...
        isequal({self.detecting_elements}, {other.detecting_elements}) && ...
        isequal({self.detecting_element_ids}, {other.detecting_element_ids}) && ...
        isequal({self.non_detecting_elements}, {other.non_detecting_elements});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = petsird.DetectorModule();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
