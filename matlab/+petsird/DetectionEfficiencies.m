% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef DetectionEfficiencies < handle
  % Component-based information on detection efficiencies
  % This encodes a simple model for the detection efficiency of (true) coincidences
  % consisting of the product of the efficiency of the two detecting elements (det_els)
  % and a (geometric) component determined by their location in the two modules.
  % The former are stored in detElEfficiencies, and the latter in modulePairEfficienciesVector
  % (a list of ModulePairEfficiencies, each entry corresponding to a module pair).

  % Most PET scanners have some kind of geometric symmetry, e.g. rotation over a full
  % module, or translation along the axis of the scanner. Module-pairs that are related
  % by such a symmetry often have the same geometric detection efficiencies. PETSIRD
  % calls this a "symmetry group" (SG). Each SG had an identifier (SGID). To save memory,
  % the modulePairEfficienciesVector needs to contain only one of element for each SGID.
  % The SGID for a module-pair can be found in modulePairSGIDLUT.

  % Finding the total detection efficiency therefore follows these steps:
  % (the following pseudo-code ignores energy bins for simplicity)
  % 1. find modules for each det_el
  % 2. find det_el indices "inside" each module
  % 3. SGID = modulePairSGIDLUT[mod1, mod1]
  % 4. if (SGID < 0) return 0
  % 5. module_pair_efficiencies = modulePairEfficienciesVector[SGID]
  % 6. return detElEfficiencies[det_el1] * detElEfficiencies[det_el2] * module_pair_efficiencies[det_el_in_mod1, det_el_in_mod2]

  % If either of the components is not present, its value is considered to be 1.
  properties
    % Detection efficiencies for every detecting element
    det_el_efficiencies
    % Lookup table for SGIDs.
    % Also indicates if coincidences between a module-pair are recorded.
    module_pair_sgidlut
    % Vector of all modulePairEfficiencies (one for each SGID)
    % Constraint: size(modulePairEfficienciesVector) == max(modulePairSGIDLUT) + 1
    module_pair_efficiencies_vector
  end

  methods
    function self = DetectionEfficiencies(kwargs)
      arguments
        kwargs.det_el_efficiencies = yardl.None;
        kwargs.module_pair_sgidlut = yardl.None;
        kwargs.module_pair_efficiencies_vector = yardl.None;
      end
      self.det_el_efficiencies = kwargs.det_el_efficiencies;
      self.module_pair_sgidlut = kwargs.module_pair_sgidlut;
      self.module_pair_efficiencies_vector = kwargs.module_pair_efficiencies_vector;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "petsird.DetectionEfficiencies") && ...
        isequal({self.det_el_efficiencies}, {other.det_el_efficiencies}) && ...
        isequal({self.module_pair_sgidlut}, {other.module_pair_sgidlut}) && ...
        isequal({self.module_pair_efficiencies_vector}, {other.module_pair_efficiencies_vector});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = petsird.DetectionEfficiencies();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
