// This file was generated by the "yardl" tool. DO NOT EDIT.

#pragma once
#include "types.h"

namespace petsird {
enum class Version {
  Current
};
// Abstract writer for the PETSIRD protocol.
// Definition of the stream of data
class PETSIRDWriterBase {
  public:
  // Ordinal 0.
  void WriteHeader(petsird::Header const& value);

  // Ordinal 1.
  // Call this method for each element of the `timeBlocks` stream, then call `EndTimeBlocks() when done.`
  void WriteTimeBlocks(petsird::TimeBlock const& value);

  // Ordinal 1.
  // Call this method to write many values to the `timeBlocks` stream, then call `EndTimeBlocks()` when done.
  void WriteTimeBlocks(std::vector<petsird::TimeBlock> const& values);

  // Marks the end of the `timeBlocks` stream.
  void EndTimeBlocks();

  // Optionaly close this writer before destructing. Validates that all steps were completed.
  void Close();

  virtual ~PETSIRDWriterBase() = default;

  // Flushes all buffered data.
  virtual void Flush() {}

  protected:
  virtual void WriteHeaderImpl(petsird::Header const& value) = 0;
  virtual void WriteTimeBlocksImpl(petsird::TimeBlock const& value) = 0;
  virtual void WriteTimeBlocksImpl(std::vector<petsird::TimeBlock> const& value);
  virtual void EndTimeBlocksImpl() = 0;
  virtual void CloseImpl() {}

  static std::string schema_;

  static std::vector<std::string> previous_schemas_;

  static std::string SchemaFromVersion(Version version);

  private:
  uint8_t state_ = 0;

  friend class PETSIRDReaderBase;
};

// Abstract reader for the PETSIRD protocol.
// Definition of the stream of data
class PETSIRDReaderBase {
  public:
  // Ordinal 0.
  void ReadHeader(petsird::Header& value);

  // Ordinal 1.
  [[nodiscard]] bool ReadTimeBlocks(petsird::TimeBlock& value);

  // Ordinal 1.
  [[nodiscard]] bool ReadTimeBlocks(std::vector<petsird::TimeBlock>& values);

  // Optionaly close this writer before destructing. Validates that all steps were completely read.
  void Close();

  void CopyTo(PETSIRDWriterBase& writer, size_t time_blocks_buffer_size = 1);

  virtual ~PETSIRDReaderBase() = default;

  protected:
  virtual void ReadHeaderImpl(petsird::Header& value) = 0;
  virtual bool ReadTimeBlocksImpl(petsird::TimeBlock& value) = 0;
  virtual bool ReadTimeBlocksImpl(std::vector<petsird::TimeBlock>& values);
  virtual void CloseImpl() {}
  static std::string schema_;

  static std::vector<std::string> previous_schemas_;

  static Version VersionFromSchema(const std::string& schema);

  private:
  uint8_t state_ = 0;
};
} // namespace petsird
