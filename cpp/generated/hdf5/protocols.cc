// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include "../yardl/detail/hdf5/io.h"
#include "../yardl/detail/hdf5/ddl.h"
#include "../yardl/detail/hdf5/inner_types.h"

namespace {
template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1>
class InnerUnion2 {
  public:
  InnerUnion2() : type_index_(-1) {} 
  InnerUnion2(std::variant<TOuter0, TOuter1> const& v) : type_index_(static_cast<int8_t>(v.index())) {
    Init(v);
  }

  InnerUnion2(std::variant<std::monostate, TOuter0, TOuter1> const& v) : type_index_(static_cast<int8_t>(v.index()) - 1) {
    Init(v);
  }

  InnerUnion2(InnerUnion2 const& v) = delete;

  InnerUnion2 operator=(InnerUnion2 const&) = delete;

  ~InnerUnion2() {
    switch (type_index_) {
    case 0:
      value0_.~TInner0();
      break;
    case 1:
      value1_.~TInner1();
      break;
    }
  }

  void ToOuter(std::variant<TOuter0, TOuter1>& o) const {
    ToOuterImpl(o);
  }

  void ToOuter(std::variant<std::monostate, TOuter0, TOuter1>& o) const {
    ToOuterImpl(o);
  }

  int8_t type_index_;
  union {
    char empty0_[sizeof(TInner0)]{};
    TInner0 value0_;
  };
  union {
    char empty1_[sizeof(TInner1)]{};
    TInner1 value1_;
  };

  private:
  template <typename T>
  void Init(T const& v) {
    constexpr size_t offset = GetOuterVariantOffset<std::remove_const_t<std::remove_reference_t<decltype(v)>>>();
    switch (type_index_) {
    case 0:
      new (&value0_) TInner0(std::get<0 + offset>(v));
      return;
    case 1:
      new (&value1_) TInner1(std::get<1 + offset>(v));
      return;
    }
  }

  template <typename TVariant>
  void ToOuterImpl(TVariant& o) const {
    constexpr size_t offset = GetOuterVariantOffset<TVariant>();
    switch (type_index_) {
    case -1:
      if constexpr (offset == 1) {
        o.template emplace<0>(std::monostate{});
        return;
      }
    case 0:
      o.template emplace<0 + offset>();
      yardl::hdf5::ToOuter(value0_, std::get<0 + offset>(o));
      return;
    case 1:
      o.template emplace<1 + offset>();
      yardl::hdf5::ToOuter(value1_, std::get<1 + offset>(o));
      return;
    }
    throw std::runtime_error("unrecognized type variant type index " + std::to_string(type_index_));
  }

  template <typename TVariant>
  static constexpr size_t GetOuterVariantOffset() {
    constexpr bool has_monostate = std::is_same_v<std::monostate, std::variant_alternative_t<0, TVariant>>;
    if constexpr (has_monostate) {
      return 1;
    }
      return 0;
  }
};

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1>
H5::CompType InnerUnion2Ddl(bool nullable, H5::DataType const& t0, std::string const& tag0, H5::DataType const& t1, std::string const& tag1) {
  using UnionType = ::InnerUnion2<TInner0, TOuter0, TInner1, TOuter1>;
  H5::CompType rtn(sizeof(UnionType));
  rtn.insertMember("$type", HOFFSET(UnionType, type_index_), yardl::hdf5::UnionTypeEnumDdl(nullable, tag0, tag1));
  rtn.insertMember(tag0, HOFFSET(UnionType, value0_), t0);
  rtn.insertMember(tag1, HOFFSET(UnionType, value1_), t1);
  return rtn;
}

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2, typename TInner3, typename TOuter3>
class InnerUnion4 {
  public:
  InnerUnion4() : type_index_(-1) {} 
  InnerUnion4(std::variant<TOuter0, TOuter1, TOuter2, TOuter3> const& v) : type_index_(static_cast<int8_t>(v.index())) {
    Init(v);
  }

  InnerUnion4(std::variant<std::monostate, TOuter0, TOuter1, TOuter2, TOuter3> const& v) : type_index_(static_cast<int8_t>(v.index()) - 1) {
    Init(v);
  }

  InnerUnion4(InnerUnion4 const& v) = delete;

  InnerUnion4 operator=(InnerUnion4 const&) = delete;

  ~InnerUnion4() {
    switch (type_index_) {
    case 0:
      value0_.~TInner0();
      break;
    case 1:
      value1_.~TInner1();
      break;
    case 2:
      value2_.~TInner2();
      break;
    case 3:
      value3_.~TInner3();
      break;
    }
  }

  void ToOuter(std::variant<TOuter0, TOuter1, TOuter2, TOuter3>& o) const {
    ToOuterImpl(o);
  }

  void ToOuter(std::variant<std::monostate, TOuter0, TOuter1, TOuter2, TOuter3>& o) const {
    ToOuterImpl(o);
  }

  int8_t type_index_;
  union {
    char empty0_[sizeof(TInner0)]{};
    TInner0 value0_;
  };
  union {
    char empty1_[sizeof(TInner1)]{};
    TInner1 value1_;
  };
  union {
    char empty2_[sizeof(TInner2)]{};
    TInner2 value2_;
  };
  union {
    char empty3_[sizeof(TInner3)]{};
    TInner3 value3_;
  };

  private:
  template <typename T>
  void Init(T const& v) {
    constexpr size_t offset = GetOuterVariantOffset<std::remove_const_t<std::remove_reference_t<decltype(v)>>>();
    switch (type_index_) {
    case 0:
      new (&value0_) TInner0(std::get<0 + offset>(v));
      return;
    case 1:
      new (&value1_) TInner1(std::get<1 + offset>(v));
      return;
    case 2:
      new (&value2_) TInner2(std::get<2 + offset>(v));
      return;
    case 3:
      new (&value3_) TInner3(std::get<3 + offset>(v));
      return;
    }
  }

  template <typename TVariant>
  void ToOuterImpl(TVariant& o) const {
    constexpr size_t offset = GetOuterVariantOffset<TVariant>();
    switch (type_index_) {
    case -1:
      if constexpr (offset == 1) {
        o.template emplace<0>(std::monostate{});
        return;
      }
    case 0:
      o.template emplace<0 + offset>();
      yardl::hdf5::ToOuter(value0_, std::get<0 + offset>(o));
      return;
    case 1:
      o.template emplace<1 + offset>();
      yardl::hdf5::ToOuter(value1_, std::get<1 + offset>(o));
      return;
    case 2:
      o.template emplace<2 + offset>();
      yardl::hdf5::ToOuter(value2_, std::get<2 + offset>(o));
      return;
    case 3:
      o.template emplace<3 + offset>();
      yardl::hdf5::ToOuter(value3_, std::get<3 + offset>(o));
      return;
    }
    throw std::runtime_error("unrecognized type variant type index " + std::to_string(type_index_));
  }

  template <typename TVariant>
  static constexpr size_t GetOuterVariantOffset() {
    constexpr bool has_monostate = std::is_same_v<std::monostate, std::variant_alternative_t<0, TVariant>>;
    if constexpr (has_monostate) {
      return 1;
    }
      return 0;
  }
};

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2, typename TInner3, typename TOuter3>
H5::CompType InnerUnion4Ddl(bool nullable, H5::DataType const& t0, std::string const& tag0, H5::DataType const& t1, std::string const& tag1, H5::DataType const& t2, std::string const& tag2, H5::DataType const& t3, std::string const& tag3) {
  using UnionType = ::InnerUnion4<TInner0, TOuter0, TInner1, TOuter1, TInner2, TOuter2, TInner3, TOuter3>;
  H5::CompType rtn(sizeof(UnionType));
  rtn.insertMember("$type", HOFFSET(UnionType, type_index_), yardl::hdf5::UnionTypeEnumDdl(nullable, tag0, tag1, tag2, tag3));
  rtn.insertMember(tag0, HOFFSET(UnionType, value0_), t0);
  rtn.insertMember(tag1, HOFFSET(UnionType, value1_), t1);
  rtn.insertMember(tag2, HOFFSET(UnionType, value2_), t2);
  rtn.insertMember(tag3, HOFFSET(UnionType, value3_), t3);
  return rtn;
}
}

namespace petsird::hdf5 {
namespace {
[[maybe_unused]] H5::EnumType GetCoincidencePolicyHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("rejectMultiples", &i);
  i = 1;
  t.insert("storeMultiplesAsPairs", &i);
  i = 2;
  t.insert("other", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetExternalSignalTypeEnumHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("ecgTrace", &i);
  i = 1;
  t.insert("ecgTrigger", &i);
  i = 2;
  t.insert("respTrace", &i);
  i = 3;
  t.insert("respTrigger", &i);
  i = 4;
  t.insert("otherMotionSignal", &i);
  i = 5;
  t.insert("otherMotionTrigger", &i);
  i = 6;
  t.insert("externalSync", &i);
  i = 7;
  t.insert("other", &i);
  return t;
}

template <typename _Shape_Inner, typename Shape>
struct _Inner_SolidVolume {
  _Inner_SolidVolume() {} 
  _Inner_SolidVolume(petsird::SolidVolume<Shape> const& o) 
      : shape(o.shape),
      material_id(o.material_id) {
  }

  void ToOuter (petsird::SolidVolume<Shape>& o) const {
    yardl::hdf5::ToOuter(shape, o.shape);
    yardl::hdf5::ToOuter(material_id, o.material_id);
  }

  _Shape_Inner shape;
  uint32_t material_id;
};

template <typename _T_Inner, typename T>
struct _Inner_ReplicatedObject {
  _Inner_ReplicatedObject() {} 
  _Inner_ReplicatedObject(petsird::ReplicatedObject<T> const& o) 
      : object(o.object),
      transforms(o.transforms),
      ids(o.ids) {
  }

  void ToOuter (petsird::ReplicatedObject<T>& o) const {
    yardl::hdf5::ToOuter(object, o.object);
    yardl::hdf5::ToOuter(transforms, o.transforms);
    yardl::hdf5::ToOuter(ids, o.ids);
  }

  _T_Inner object;
  yardl::hdf5::InnerVlen<petsird::RigidTransformation, petsird::RigidTransformation> transforms;
  yardl::hdf5::InnerVlen<uint32_t, uint32_t> ids;
};

struct _Inner_DetectorModule {
  _Inner_DetectorModule() {} 
  _Inner_DetectorModule(petsird::DetectorModule const& o) 
      : detecting_elements(o.detecting_elements),
      detecting_element_ids(o.detecting_element_ids),
      non_detecting_elements(o.non_detecting_elements) {
  }

  void ToOuter (petsird::DetectorModule& o) const {
    yardl::hdf5::ToOuter(detecting_elements, o.detecting_elements);
    yardl::hdf5::ToOuter(detecting_element_ids, o.detecting_element_ids);
    yardl::hdf5::ToOuter(non_detecting_elements, o.non_detecting_elements);
  }

  yardl::hdf5::InnerVlen<petsird::hdf5::_Inner_ReplicatedObject<petsird::SolidVolume<petsird::BoxShape>, petsird::BoxSolidVolume>, petsird::ReplicatedBoxSolidVolume> detecting_elements;
  yardl::hdf5::InnerVlen<uint32_t, uint32_t> detecting_element_ids;
  yardl::hdf5::InnerVlen<petsird::hdf5::_Inner_ReplicatedObject<petsird::hdf5::_Inner_SolidVolume<::InnerUnion2<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>, petsird::GeometricShape>, petsird::GenericSolidVolume>, petsird::ReplicatedGenericSolidVolume> non_detecting_elements;
};

struct _Inner_ScannerGeometry {
  _Inner_ScannerGeometry() {} 
  _Inner_ScannerGeometry(petsird::ScannerGeometry const& o) 
      : replicated_modules(o.replicated_modules),
      ids(o.ids),
      non_detecting_volumes(o.non_detecting_volumes) {
  }

  void ToOuter (petsird::ScannerGeometry& o) const {
    yardl::hdf5::ToOuter(replicated_modules, o.replicated_modules);
    yardl::hdf5::ToOuter(ids, o.ids);
    yardl::hdf5::ToOuter(non_detecting_volumes, o.non_detecting_volumes);
  }

  yardl::hdf5::InnerVlen<petsird::hdf5::_Inner_ReplicatedObject<petsird::hdf5::_Inner_DetectorModule, petsird::DetectorModule>, petsird::ReplicatedDetectorModule> replicated_modules;
  yardl::hdf5::InnerVlen<uint32_t, uint32_t> ids;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlen<petsird::hdf5::_Inner_SolidVolume<::InnerUnion2<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>, petsird::GeometricShape>, petsird::GenericSolidVolume>, std::vector<petsird::GenericSolidVolume>> non_detecting_volumes;
};

struct _Inner_Subject {
  _Inner_Subject() {} 
  _Inner_Subject(petsird::Subject const& o) 
      : name(o.name),
      id(o.id) {
  }

  void ToOuter (petsird::Subject& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(id, o.id);
  }

  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> name;
  yardl::hdf5::InnerVlenString id;
};

struct _Inner_Institution {
  _Inner_Institution() {} 
  _Inner_Institution(petsird::Institution const& o) 
      : name(o.name),
      address(o.address) {
  }

  void ToOuter (petsird::Institution& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(address, o.address);
  }

  yardl::hdf5::InnerVlenString name;
  yardl::hdf5::InnerVlenString address;
};

struct _Inner_ExamInformation {
  _Inner_ExamInformation() {} 
  _Inner_ExamInformation(petsird::ExamInformation const& o) 
      : subject(o.subject),
      institution(o.institution),
      protocol(o.protocol),
      start_of_acquisition(o.start_of_acquisition) {
  }

  void ToOuter (petsird::ExamInformation& o) const {
    yardl::hdf5::ToOuter(subject, o.subject);
    yardl::hdf5::ToOuter(institution, o.institution);
    yardl::hdf5::ToOuter(protocol, o.protocol);
    yardl::hdf5::ToOuter(start_of_acquisition, o.start_of_acquisition);
  }

  petsird::hdf5::_Inner_Subject subject;
  petsird::hdf5::_Inner_Institution institution;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> protocol;
  yardl::hdf5::InnerOptional<yardl::DateTime, yardl::DateTime> start_of_acquisition;
};

struct _Inner_BulkMaterial {
  _Inner_BulkMaterial() {} 
  _Inner_BulkMaterial(petsird::BulkMaterial const& o) 
      : id(o.id),
      name(o.name),
      density(o.density),
      atoms(o.atoms),
      mass_fractions(o.mass_fractions) {
  }

  void ToOuter (petsird::BulkMaterial& o) const {
    yardl::hdf5::ToOuter(id, o.id);
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(density, o.density);
    yardl::hdf5::ToOuter(atoms, o.atoms);
    yardl::hdf5::ToOuter(mass_fractions, o.mass_fractions);
  }

  uint32_t id;
  yardl::hdf5::InnerVlenString name;
  float density;
  yardl::hdf5::InnerVlen<petsird::Atom, petsird::Atom> atoms;
  yardl::hdf5::InnerVlen<float, float> mass_fractions;
};

struct _Inner_ScannerInformation {
  _Inner_ScannerInformation() {} 
  _Inner_ScannerInformation(petsird::ScannerInformation const& o) 
      : model_name(o.model_name),
      scanner_geometry(o.scanner_geometry),
      bulk_materials(o.bulk_materials),
      gantry_alignment(o.gantry_alignment),
      tof_bin_edges(o.tof_bin_edges),
      tof_resolution(o.tof_resolution),
      energy_bin_edges(o.energy_bin_edges),
      energy_resolution_at_511(o.energy_resolution_at_511),
      event_time_block_duration(o.event_time_block_duration),
      coincidence_policy(o.coincidence_policy) {
  }

  void ToOuter (petsird::ScannerInformation& o) const {
    yardl::hdf5::ToOuter(model_name, o.model_name);
    yardl::hdf5::ToOuter(scanner_geometry, o.scanner_geometry);
    yardl::hdf5::ToOuter(bulk_materials, o.bulk_materials);
    yardl::hdf5::ToOuter(gantry_alignment, o.gantry_alignment);
    yardl::hdf5::ToOuter(tof_bin_edges, o.tof_bin_edges);
    yardl::hdf5::ToOuter(tof_resolution, o.tof_resolution);
    yardl::hdf5::ToOuter(energy_bin_edges, o.energy_bin_edges);
    yardl::hdf5::ToOuter(energy_resolution_at_511, o.energy_resolution_at_511);
    yardl::hdf5::ToOuter(event_time_block_duration, o.event_time_block_duration);
    yardl::hdf5::ToOuter(coincidence_policy, o.coincidence_policy);
  }

  yardl::hdf5::InnerVlenString model_name;
  petsird::hdf5::_Inner_ScannerGeometry scanner_geometry;
  yardl::hdf5::InnerVlen<petsird::hdf5::_Inner_BulkMaterial, petsird::BulkMaterial> bulk_materials;
  yardl::hdf5::InnerOptional<petsird::RigidTransformation, petsird::RigidTransformation> gantry_alignment;
  yardl::hdf5::InnerVlen<float, float> tof_bin_edges;
  float tof_resolution;
  yardl::hdf5::InnerVlen<float, float> energy_bin_edges;
  float energy_resolution_at_511;
  uint32_t event_time_block_duration;
  petsird::CoincidencePolicy coincidence_policy;
};

struct _Inner_Header {
  _Inner_Header() {} 
  _Inner_Header(petsird::Header const& o) 
      : scanner(o.scanner),
      exam(o.exam) {
  }

  void ToOuter (petsird::Header& o) const {
    yardl::hdf5::ToOuter(scanner, o.scanner);
    yardl::hdf5::ToOuter(exam, o.exam);
  }

  petsird::hdf5::_Inner_ScannerInformation scanner;
  yardl::hdf5::InnerOptional<petsird::hdf5::_Inner_ExamInformation, petsird::ExamInformation> exam;
};

struct _Inner_EventTimeBlock {
  _Inner_EventTimeBlock() {} 
  _Inner_EventTimeBlock(petsird::EventTimeBlock const& o) 
      : start(o.start),
      prompt_events(o.prompt_events),
      delayed_events(o.delayed_events),
      triple_events(o.triple_events) {
  }

  void ToOuter (petsird::EventTimeBlock& o) const {
    yardl::hdf5::ToOuter(start, o.start);
    yardl::hdf5::ToOuter(prompt_events, o.prompt_events);
    yardl::hdf5::ToOuter(delayed_events, o.delayed_events);
    yardl::hdf5::ToOuter(triple_events, o.triple_events);
  }

  uint32_t start;
  yardl::hdf5::InnerVlen<petsird::CoincidenceEvent, petsird::CoincidenceEvent> prompt_events;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlen<petsird::CoincidenceEvent, petsird::CoincidenceEvent>, std::vector<petsird::CoincidenceEvent>> delayed_events;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlen<petsird::TripleEvent, petsird::TripleEvent>, std::vector<petsird::TripleEvent>> triple_events;
};

struct _Inner_ExternalSignalTimeBlock {
  _Inner_ExternalSignalTimeBlock() {} 
  _Inner_ExternalSignalTimeBlock(petsird::ExternalSignalTimeBlock const& o) 
      : start(o.start),
      signal_id(o.signal_id),
      signal_values(o.signal_values) {
  }

  void ToOuter (petsird::ExternalSignalTimeBlock& o) const {
    yardl::hdf5::ToOuter(start, o.start);
    yardl::hdf5::ToOuter(signal_id, o.signal_id);
    yardl::hdf5::ToOuter(signal_values, o.signal_values);
  }

  uint32_t start;
  uint32_t signal_id;
  yardl::hdf5::InnerVlen<float, float> signal_values;
};

struct _Inner_ExternalSignalType {
  _Inner_ExternalSignalType() {} 
  _Inner_ExternalSignalType(petsird::ExternalSignalType const& o) 
      : type(o.type),
      description(o.description),
      id(o.id) {
  }

  void ToOuter (petsird::ExternalSignalType& o) const {
    yardl::hdf5::ToOuter(type, o.type);
    yardl::hdf5::ToOuter(description, o.description);
    yardl::hdf5::ToOuter(id, o.id);
  }

  petsird::ExternalSignalTypeEnum type;
  yardl::hdf5::InnerVlenString description;
  uint32_t id;
};

struct _Inner_TimeFrameInformation {
  _Inner_TimeFrameInformation() {} 
  _Inner_TimeFrameInformation(petsird::TimeFrameInformation const& o) 
      : time_frames(o.time_frames) {
  }

  void ToOuter (petsird::TimeFrameInformation& o) const {
    yardl::hdf5::ToOuter(time_frames, o.time_frames);
  }

  yardl::hdf5::InnerVlen<petsird::TimeInterval, petsird::TimeInterval> time_frames;
};

[[maybe_unused]] H5::CompType GetCoincidenceEventHdf5Ddl() {
  using RecordType = petsird::CoincidenceEvent;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("detectorIds", HOFFSET(RecordType, detector_ids), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_UINT32, 2));
  t.insertMember("tofIdx", HOFFSET(RecordType, tof_idx), H5::PredType::NATIVE_UINT32);
  t.insertMember("energyIndices", HOFFSET(RecordType, energy_indices), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_UINT32, 2));
  return t;
}

template <typename _Shape_Inner, typename Shape>
[[maybe_unused]] H5::CompType GetSolidVolumeHdf5Ddl(H5::DataType const& Shape_type) {
  using RecordType = petsird::hdf5::_Inner_SolidVolume<_Shape_Inner, Shape>;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("shape", HOFFSET(RecordType, shape), Shape_type);
  t.insertMember("materialId", HOFFSET(RecordType, material_id), H5::PredType::NATIVE_UINT32);
  return t;
}

[[maybe_unused]] H5::CompType GetCoordinateHdf5Ddl() {
  using RecordType = petsird::Coordinate;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("c", HOFFSET(RecordType, c), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  return t;
}

[[maybe_unused]] H5::CompType GetBoxShapeHdf5Ddl() {
  using RecordType = petsird::BoxShape;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("corners", HOFFSET(RecordType, corners), yardl::hdf5::FixedVectorDdl(petsird::hdf5::GetCoordinateHdf5Ddl(), 8));
  return t;
}

[[maybe_unused]] H5::CompType GetAnnulusShapeHdf5Ddl() {
  using RecordType = petsird::AnnulusShape;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("innerRadius", HOFFSET(RecordType, inner_radius), H5::PredType::NATIVE_FLOAT);
  t.insertMember("outerRadius", HOFFSET(RecordType, outer_radius), H5::PredType::NATIVE_FLOAT);
  t.insertMember("thickness", HOFFSET(RecordType, thickness), H5::PredType::NATIVE_FLOAT);
  t.insertMember("angularRange", HOFFSET(RecordType, angular_range), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_FLOAT, 2));
  return t;
}

[[maybe_unused]] H5::CompType GetRigidTransformationHdf5Ddl() {
  using RecordType = petsird::RigidTransformation;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("matrix", HOFFSET(RecordType, matrix), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3, 4}));
  return t;
}

template <typename _T_Inner, typename T>
[[maybe_unused]] H5::CompType GetReplicatedObjectHdf5Ddl(H5::DataType const& T_type) {
  using RecordType = petsird::hdf5::_Inner_ReplicatedObject<_T_Inner, T>;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("object", HOFFSET(RecordType, object), T_type);
  t.insertMember("transforms", HOFFSET(RecordType, transforms), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetRigidTransformationHdf5Ddl()));
  t.insertMember("ids", HOFFSET(RecordType, ids), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_UINT32));
  return t;
}

[[maybe_unused]] H5::CompType GetDetectorModuleHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_DetectorModule;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("detectingElements", HOFFSET(RecordType, detecting_elements), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetReplicatedObjectHdf5Ddl<petsird::SolidVolume<petsird::BoxShape>, petsird::BoxSolidVolume>(petsird::hdf5::GetSolidVolumeHdf5Ddl<petsird::BoxShape, petsird::BoxShape>(petsird::hdf5::GetBoxShapeHdf5Ddl()))));
  t.insertMember("detectingElementIds", HOFFSET(RecordType, detecting_element_ids), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_UINT32));
  t.insertMember("nonDetectingElements", HOFFSET(RecordType, non_detecting_elements), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetReplicatedObjectHdf5Ddl<petsird::hdf5::_Inner_SolidVolume<::InnerUnion2<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>, petsird::GeometricShape>, petsird::GenericSolidVolume>(petsird::hdf5::GetSolidVolumeHdf5Ddl<::InnerUnion2<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>, petsird::GeometricShape>(::InnerUnion2Ddl<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>(false, petsird::hdf5::GetBoxShapeHdf5Ddl(), "BoxShape", petsird::hdf5::GetAnnulusShapeHdf5Ddl(), "AnnulusShape")))));
  return t;
}

[[maybe_unused]] H5::CompType GetScannerGeometryHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_ScannerGeometry;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("replicatedModules", HOFFSET(RecordType, replicated_modules), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetReplicatedObjectHdf5Ddl<petsird::hdf5::_Inner_DetectorModule, petsird::DetectorModule>(petsird::hdf5::GetDetectorModuleHdf5Ddl())));
  t.insertMember("ids", HOFFSET(RecordType, ids), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_UINT32));
  t.insertMember("nonDetectingVolumes", HOFFSET(RecordType, non_detecting_volumes), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlen<petsird::hdf5::_Inner_SolidVolume<::InnerUnion2<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>, petsird::GeometricShape>, petsird::GenericSolidVolume>, std::vector<petsird::GenericSolidVolume>>(yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetSolidVolumeHdf5Ddl<::InnerUnion2<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>, petsird::GeometricShape>(::InnerUnion2Ddl<petsird::BoxShape, petsird::BoxShape, petsird::AnnulusShape, petsird::AnnulusShape>(false, petsird::hdf5::GetBoxShapeHdf5Ddl(), "BoxShape", petsird::hdf5::GetAnnulusShapeHdf5Ddl(), "AnnulusShape")))));
  return t;
}

[[maybe_unused]] H5::CompType GetSubjectHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_Subject;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("id", HOFFSET(RecordType, id), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetInstitutionHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_Institution;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("address", HOFFSET(RecordType, address), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetExamInformationHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_ExamInformation;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("subject", HOFFSET(RecordType, subject), petsird::hdf5::GetSubjectHdf5Ddl());
  t.insertMember("institution", HOFFSET(RecordType, institution), petsird::hdf5::GetInstitutionHdf5Ddl());
  t.insertMember("protocol", HOFFSET(RecordType, protocol), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("startOfAcquisition", HOFFSET(RecordType, start_of_acquisition), yardl::hdf5::OptionalTypeDdl<yardl::DateTime, yardl::DateTime>(yardl::hdf5::DateTimeTypeDdl()));
  return t;
}

[[maybe_unused]] H5::CompType GetDirectionHdf5Ddl() {
  using RecordType = petsird::Direction;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("c", HOFFSET(RecordType, c), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  return t;
}

[[maybe_unused]] H5::CompType GetDirectionMatrixHdf5Ddl() {
  using RecordType = petsird::DirectionMatrix;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("matrix", HOFFSET(RecordType, matrix), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3, 3}));
  return t;
}

[[maybe_unused]] H5::CompType GetAtomHdf5Ddl() {
  using RecordType = petsird::Atom;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("massNumber", HOFFSET(RecordType, mass_number), H5::PredType::NATIVE_UINT32);
  t.insertMember("atomicNumber", HOFFSET(RecordType, atomic_number), H5::PredType::NATIVE_UINT32);
  return t;
}

[[maybe_unused]] H5::CompType GetBulkMaterialHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_BulkMaterial;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("id", HOFFSET(RecordType, id), H5::PredType::NATIVE_UINT32);
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("density", HOFFSET(RecordType, density), H5::PredType::NATIVE_FLOAT);
  t.insertMember("atoms", HOFFSET(RecordType, atoms), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetAtomHdf5Ddl()));
  t.insertMember("massFractions", HOFFSET(RecordType, mass_fractions), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  return t;
}

[[maybe_unused]] H5::CompType GetScannerInformationHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_ScannerInformation;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("modelName", HOFFSET(RecordType, model_name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("scannerGeometry", HOFFSET(RecordType, scanner_geometry), petsird::hdf5::GetScannerGeometryHdf5Ddl());
  t.insertMember("bulkMaterials", HOFFSET(RecordType, bulk_materials), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetBulkMaterialHdf5Ddl()));
  t.insertMember("gantryAlignment", HOFFSET(RecordType, gantry_alignment), yardl::hdf5::OptionalTypeDdl<petsird::RigidTransformation, petsird::RigidTransformation>(petsird::hdf5::GetRigidTransformationHdf5Ddl()));
  t.insertMember("tofBinEdges", HOFFSET(RecordType, tof_bin_edges), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  t.insertMember("tofResolution", HOFFSET(RecordType, tof_resolution), H5::PredType::NATIVE_FLOAT);
  t.insertMember("energyBinEdges", HOFFSET(RecordType, energy_bin_edges), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  t.insertMember("energyResolutionAt511", HOFFSET(RecordType, energy_resolution_at_511), H5::PredType::NATIVE_FLOAT);
  t.insertMember("eventTimeBlockDuration", HOFFSET(RecordType, event_time_block_duration), H5::PredType::NATIVE_UINT32);
  t.insertMember("coincidencePolicy", HOFFSET(RecordType, coincidence_policy), petsird::hdf5::GetCoincidencePolicyHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetHeaderHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_Header;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("scanner", HOFFSET(RecordType, scanner), petsird::hdf5::GetScannerInformationHdf5Ddl());
  t.insertMember("exam", HOFFSET(RecordType, exam), yardl::hdf5::OptionalTypeDdl<petsird::hdf5::_Inner_ExamInformation, petsird::ExamInformation>(petsird::hdf5::GetExamInformationHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetTripleEventHdf5Ddl() {
  using RecordType = petsird::TripleEvent;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("detectorIds", HOFFSET(RecordType, detector_ids), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_UINT32, 3));
  t.insertMember("tofIndices", HOFFSET(RecordType, tof_indices), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_UINT32, 2));
  t.insertMember("energyIndices", HOFFSET(RecordType, energy_indices), yardl::hdf5::FixedVectorDdl(H5::PredType::NATIVE_UINT32, 3));
  return t;
}

[[maybe_unused]] H5::CompType GetEventTimeBlockHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_EventTimeBlock;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("start", HOFFSET(RecordType, start), H5::PredType::NATIVE_UINT32);
  t.insertMember("promptEvents", HOFFSET(RecordType, prompt_events), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetCoincidenceEventHdf5Ddl()));
  t.insertMember("delayedEvents", HOFFSET(RecordType, delayed_events), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlen<petsird::CoincidenceEvent, petsird::CoincidenceEvent>, std::vector<petsird::CoincidenceEvent>>(yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetCoincidenceEventHdf5Ddl())));
  t.insertMember("tripleEvents", HOFFSET(RecordType, triple_events), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlen<petsird::TripleEvent, petsird::TripleEvent>, std::vector<petsird::TripleEvent>>(yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetTripleEventHdf5Ddl())));
  return t;
}

[[maybe_unused]] H5::CompType GetExternalSignalTimeBlockHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_ExternalSignalTimeBlock;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("start", HOFFSET(RecordType, start), H5::PredType::NATIVE_UINT32);
  t.insertMember("signalID", HOFFSET(RecordType, signal_id), H5::PredType::NATIVE_UINT32);
  t.insertMember("signalValues", HOFFSET(RecordType, signal_values), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  return t;
}

[[maybe_unused]] H5::CompType GetBedMovementTimeBlockHdf5Ddl() {
  using RecordType = petsird::BedMovementTimeBlock;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("start", HOFFSET(RecordType, start), H5::PredType::NATIVE_UINT32);
  t.insertMember("transform", HOFFSET(RecordType, transform), petsird::hdf5::GetRigidTransformationHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetGantryMovementTimeBlockHdf5Ddl() {
  using RecordType = petsird::GantryMovementTimeBlock;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("start", HOFFSET(RecordType, start), H5::PredType::NATIVE_UINT32);
  t.insertMember("transform", HOFFSET(RecordType, transform), petsird::hdf5::GetRigidTransformationHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetExternalSignalTypeHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_ExternalSignalType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("type", HOFFSET(RecordType, type), petsird::hdf5::GetExternalSignalTypeEnumHdf5Ddl());
  t.insertMember("description", HOFFSET(RecordType, description), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("id", HOFFSET(RecordType, id), H5::PredType::NATIVE_UINT32);
  return t;
}

[[maybe_unused]] H5::CompType GetTimeIntervalHdf5Ddl() {
  using RecordType = petsird::TimeInterval;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("start", HOFFSET(RecordType, start), H5::PredType::NATIVE_UINT32);
  t.insertMember("stop", HOFFSET(RecordType, stop), H5::PredType::NATIVE_UINT32);
  return t;
}

[[maybe_unused]] H5::CompType GetTimeFrameInformationHdf5Ddl() {
  using RecordType = petsird::hdf5::_Inner_TimeFrameInformation;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("timeFrames", HOFFSET(RecordType, time_frames), yardl::hdf5::InnerVlenDdl(petsird::hdf5::GetTimeIntervalHdf5Ddl()));
  return t;
}

} // namespace 

PETSIRDWriter::PETSIRDWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "PETSIRD", schema_) {
}

void PETSIRDWriter::WriteHeaderImpl(petsird::Header const& value) {
  yardl::hdf5::WriteScalarDataset<petsird::hdf5::_Inner_Header, petsird::Header>(group_, "header", petsird::hdf5::GetHeaderHdf5Ddl(), value);
}

void PETSIRDWriter::WriteTimeBlocksImpl(petsird::TimeBlock const& value) {
  if (!timeBlocks_dataset_state_) {
    timeBlocks_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<4>>(group_, "timeBlocks", false, std::make_tuple(petsird::hdf5::GetEventTimeBlockHdf5Ddl(), "EventTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetExternalSignalTimeBlockHdf5Ddl(), "ExternalSignalTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetBedMovementTimeBlockHdf5Ddl(), "BedMovementTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetGantryMovementTimeBlockHdf5Ddl(), "GantryMovementTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, petsird::EventTimeBlock>) {
        timeBlocks_dataset_state_->Append<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, petsird::ExternalSignalTimeBlock>) {
        timeBlocks_dataset_state_->Append<petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, petsird::BedMovementTimeBlock>) {
        timeBlocks_dataset_state_->Append<petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, petsird::GantryMovementTimeBlock>) {
        timeBlocks_dataset_state_->Append<petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>(static_cast<int8_t>(value.index()), arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void PETSIRDWriter::EndTimeBlocksImpl() {
  if (!timeBlocks_dataset_state_) {
    timeBlocks_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<4>>(group_, "timeBlocks", false, std::make_tuple(petsird::hdf5::GetEventTimeBlockHdf5Ddl(), "EventTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetExternalSignalTimeBlockHdf5Ddl(), "ExternalSignalTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetBedMovementTimeBlockHdf5Ddl(), "BedMovementTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetGantryMovementTimeBlockHdf5Ddl(), "GantryMovementTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))));
  }

  timeBlocks_dataset_state_.reset();
}

void PETSIRDWriter::Flush() {
  if (timeBlocks_dataset_state_) {
    timeBlocks_dataset_state_->Flush();
  }
}

PETSIRDReader::PETSIRDReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "PETSIRD", schema_) {
}

void PETSIRDReader::ReadHeaderImpl(petsird::Header& value) {
  yardl::hdf5::ReadScalarDataset<petsird::hdf5::_Inner_Header, petsird::Header>(group_, "header", petsird::hdf5::GetHeaderHdf5Ddl(), value);
}

bool PETSIRDReader::ReadTimeBlocksImpl(petsird::TimeBlock& value) {
  if (!timeBlocks_dataset_state_) {
    timeBlocks_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<4>>(group_, "timeBlocks", false, std::make_tuple(petsird::hdf5::GetEventTimeBlockHdf5Ddl(), "EventTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetExternalSignalTimeBlockHdf5Ddl(), "ExternalSignalTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetBedMovementTimeBlockHdf5Ddl(), "BedMovementTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))), std::make_tuple(petsird::hdf5::GetGantryMovementTimeBlockHdf5Ddl(), "GantryMovementTimeBlock", static_cast<size_t>(std::max(sizeof(::InnerUnion4<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock, petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>), sizeof(std::variant<petsird::EventTimeBlock, petsird::ExternalSignalTimeBlock, petsird::BedMovementTimeBlock, petsird::GantryMovementTimeBlock>)))));
  }

  auto [has_result, type_index, reader] = timeBlocks_dataset_state_->ReadIndex();
  if (!has_result) {
    timeBlocks_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case 0: {
    petsird::EventTimeBlock& ref = value.emplace<0>();
    reader->Read<petsird::hdf5::_Inner_EventTimeBlock, petsird::EventTimeBlock>(ref);
    break;
  }
  case 1: {
    petsird::ExternalSignalTimeBlock& ref = value.emplace<1>();
    reader->Read<petsird::hdf5::_Inner_ExternalSignalTimeBlock, petsird::ExternalSignalTimeBlock>(ref);
    break;
  }
  case 2: {
    petsird::BedMovementTimeBlock& ref = value.emplace<2>();
    reader->Read<petsird::BedMovementTimeBlock, petsird::BedMovementTimeBlock>(ref);
    break;
  }
  case 3: {
    petsird::GantryMovementTimeBlock& ref = value.emplace<3>();
    reader->Read<petsird::GantryMovementTimeBlock, petsird::GantryMovementTimeBlock>(ref);
    break;
  }
  }

  return true;
}

} // namespace petsird::hdf5

