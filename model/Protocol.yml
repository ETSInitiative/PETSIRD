# Definition of the stream of data
PETSIRD: !protocol
  sequence:
    header: Header
    timeBlocks: !stream
      # block with information (e.g. events, signals, etc.) occurring at a certain time or in a time interval
      # Note: multiple time blocks can occur at the same start time
      items: TimeBlock

Header: !record
  fields:
    scanner: ScannerInformation
    exam: ExamInformation?

# types of timeBlocks
TimeBlock: [EventTimeBlock, ExternalSignalTimeBlock, BedMovementTimeBlock, GantryMovementTimeBlock, DeadTimeTimeBlock, SinglesHistogramTimeBlock]

# Type definition for a list of coincidences, where all coincidences are between 2 modules of specific types
ListOfCoincidenceEvents: CoincidenceEvent*

# Type definition for a list of triples, where all triples are between 3 modules of specific types
ListOfTripleEvents: TripleEvent*

EventTimeBlock: !record
  fields:
   # time interval for this time block
   # We suggest that for each coincidence/multiple event, the earliest time of arrival
   # of a photon is used for deciding which time block the event is entered in.
   # However, the impact of this choice is negligible and therefore can be vendor dependent.
   timeInterval: TimeInterval
   # Nested vector with lists of prompts in this time block
   # There is one separate list for every pair of module types.
   # To get the list of prompts for 2 types of modules where the first `detectionBin`
   # given in the `CoincidenceEvent` is in a module of the first type, use
   #  promptEvents[typeOfModule1][typeOfModule2]
   # Note that the ListOfCoincidenceEvents could be empty for a particular module-pair.
   # Note that in principle, this nested vector could be made "upper diagonal",
   # but this is currently not enforced. Therefore, to check all coincidences between two
   # different types of modules, a user will have to check two lists, i.e. also
   #  promptEvents[typeOfModule2][typeOfModule1]
   # Constraint: size(promptsEvents) == ScannerInformation.numberOfReplicatedModules
   # Constraint: size(promptsEvents[*]) == ScannerInformation.numberOfReplicatedModules
   promptEvents: ListOfCoincidenceEvents**
   # optional nested vector with lists of delayed coincidences in this time block
   # To get the list of delayeds for 2 types of modules, use
   #  delayedEvents[typeOfModule1][typeOfModule2]
   # See promptEvents for more information.
   # Constraint: size(delayedEvents) == ScannerInformation.numberOfReplicatedModules
   # Constraint: size(delayedEvents[*]) == ScannerInformation.numberOfReplicatedModules
   delayedEvents: ListOfCoincidenceEvents**?
   # optional nested vector with lists of triple coincidences in this time block
   # To get the list of triples for 3 types of modules, use
   #  tripleEvents[typeOfModule1][typeOfModule2][typeOfModule3]
   # See promptEvents for more information.
   # Constraint: size(tripleEvents) == ScannerInformation.numberOfReplicatedModules
   # Constraint: size(tripleEvents[*]) == ScannerInformation.numberOfReplicatedModules
   # Constraint: size(tripleEvents[*][*]) == ScannerInformation.numberOfReplicatedModules
   tripleEvents: ListOfTripleEvents***?

ExternalSignalTypeEnum: !enum
  values:
    - ecgTrace
    - ecgTrigger
    - respTrace
    - respTrigger
    - otherMotionSignal
    - otherMotionTrigger
    - externalSync
    - mrPulseStart
    # other options, to be listed in the future
    - other

ExternalSignal: !record
  fields:
    type: ExternalSignalTypeEnum
    description: string
    id: uint

# A time block containing the values for a particular external signal.
# See ExamInformation.externalSignals for the list of possible signals.
ExternalSignalTimeBlock: !record
  fields:
   # time interval for this time block
   # Note: for triggers, the time interval should be very short (and can be zero).
   timeInterval: TimeInterval
   # refer to ExternalSignal.id
   # Constraint: value has to be listed in ExamInformation.externalSignals.
   signalID: uint
   # Note for triggers, this field is to be ignored
   signalValues: float*

BedMovementTimeBlock: !record
  fields:
    # time interval for this time block
    timeInterval: TimeInterval
    transform: RigidTransformation

GantryMovementTimeBlock: !record
  fields:
    # time interval for this time block
    timeInterval: TimeInterval
    transform: RigidTransformation

# A time block that stores the dead-time information for the given interval
# Dead-time is encoded as "alive_time_fraction", i.e. 1 - dead_time_fraction
# A component-based model is used, where the total alive-time for a pair of DetectionBins
# is computed as the product of the (singles) alive-time of each detector times the
# coincidence-alive-time of the corresponding module-pair, i.e. conceptually
# aliveTimeFraction(detectionBin0, detectionBin1) =
#   singlesAliveTimeFraction(detectionBin0) *
#   singlesAliveTimeFraction(detectionBin1) *
#   moduleCoincidenceAliveTimeFraction[module(detectionBin0), module(detectionBin1)]
# Constraint: the time covered by all event time blocks has to be covered by dead-time time blocks
DeadTimeTimeBlock: !record
  fields:
    # time interval for this time block
    timeInterval: TimeInterval
    # Singles dead-time array for the time interval, stored as fractions of "alive time"
    # (1 means no dead-time, 0 means no detected counts)
    # Constraint: sizeOfDetElIdxDimension == number of all possible unique DetElIdxs
    # Constraint: (sizeOfEnergyIdxDimension == ScannerInformation.numberOfEventEnergyBins)
    singlesAliveTimeFraction: !array
      items: float
      dimensions: [detElIdx, energyIdx]
    # coincidence dead-time array for 2 modules in coincidence, stored as fractions of "alive time"
    # (1 means no dead-time, 0 means no detected coincidences)
    # If the size of this 2D array is (1,1), it is assumed that the corresponding alive-fraction is the same for all modules.
    # Constraint: size(moduleCoincidenceAliveTimeFraction, 0) == 1 or total number of modules of all types
    # Constraint: size(moduleCoincidenceAliveTimeFraction, 1) == 1 or total number of modules of all types
    # Constraint: this matrix has to be symmetric
    moduleCoincidenceAliveTimeFraction: !array
      items: float
      dimensions: [moduleId0, moduleId1]

  computedFields:
    sizeOfDetElIdxDimension: size(singlesAliveTimeFraction, 'detElIdx')
    sizeOfEnergyIdxDimension: size(singlesAliveTimeFraction, 'energyIdx')

# A time block that stores a singles histogram.
# See SinglesHistogramLevelType for information.
# Constraint: if ScannerInformation.singlesHistogramLevel == SinglesHistogramLevelType.none, there should
#     be no time blocks of this type in the stream.
#     Otherwise, the union of SinglesHistogramTimeBlock.timeInterval should be at least as large as the union of all EventTimeBlocks.timeInterval
SinglesHistogramTimeBlock: !record
  fields:
    timeInterval: TimeInterval
    # A 2D histogram of all singles (after energy discrimination) occuring in the timeInterval.
    # The dimensions correspond to positional information (i.e. moduleIdx or detElIdx, see below)
    # and energy index. The latter index refers to ScannerInformation.singlesHistogramEnergyBinEdges.
    # Note that in future, we might consider also storing singles before energy discrimination,
    # but this is currently not supported.
    #
    # If ScannerInformation.singlesHistogramLevel == SinglesHistogramLevelType.module, the
    # positionalIdx runs over all modules.
    # If ScannerInformation.singlesHistogramLevel == SinglesHistogramLevelType.all, the
    # positionalIdx runs over all DetElIdxs.
    # Constraint: (singlesHistogramLevel == module && sizeOfPositionalIdxDimension == total number of modules of all types) ||
    #             (singlesHistogramLevel == all && sizeOfPositionalIdxDimension == total number of detecting elements in all modules)
    # Constraint:  sizeOfEnergyIdxDimension == ScannerInformation.numberOfSinglesHistogramEnergyBins
    singlesHistogram: !array
      items: uint64
      dimensions: [positionalIdx, energyIdx]
  computedFields:
    sizeOfPositionalIdxDimension: size(singlesHistogram, 'positionalIdx')
    sizeOfEnergyIdxDimension: size(singlesHistogram, 'energyIdx')
