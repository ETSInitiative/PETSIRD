
# Type definition for how to encode how the scanner handles multiple coincidences when recording the prompts.
# Due to various effects (such as high count rate, prompt gammas), it is possible that multiple single
# events are detected within the coincidence window. This type encodes some different ways
# that this multiple events are handled, and recorded in the coincidence stream.
CoincidencePolicy: !enum
  values:
    # multiples will be rejected
    - rejectMultiples

    # multiples will be stored as a sequence of all pairs, e.g. a triple leads to 3 pairs
    - multiplesAsAllCoincidences

    # multiples will be stored as a sequence pairs, e.g. a triple leads to 2 pairs
    # (single1 and single2, single2 and single3)
    - multiplesAsSequentialCoincidences

    # other options, to be listed in the future
    - other

# Type definition for how single histogrammes are stored.
# Many scanners are able to store singles accumulated in some time intervals, i.e.
# histogrammed (as opposed to a list of singles with their corresponding DetectorId).
# However, some scanners do not store this information at the smallest detector resolution.
# Therefore, PETSIRD currently supports a total singles count for each module as well.
#
# Note that PETSIRD allows giving singles count summed over all energy windows. This is
# currently not encode in this enum, but is derived from the size of the histogram.
# See SinglesHistogramTimeBlock.
SinglesHistogramLevelType: !enum
  values:
    # singles histograms are not stored at all
    - none
    # singles counts per module
    - module
    # singles counts for each DetectorId
    - all

ScannerInformation: !record
  fields:
    modelName: string

    # Geometric information for all detector elements
    # All coordinates are in the PET gantry coordinate system.
    scannerGeometry: ScannerGeometry

    # List of materials present in the scanner geometry. The `material_id`s there will refer to the
    # identifiers in this list below.
    bulkMaterials: BulkMaterial*

    # Fixed transformation to reference location for this scanner.
    # This field can be used to encode alignment with the CT or MRI gantry for instance.
    # The transformation should convert from the PET gantry coordinate system to the reference.
    # An empty field implies the identity transformation.
    gantryAlignment: RigidTransformation?

    # Edge information for TOF bins in mm (given as from first to last edge, so there is one more edge than the number of bins)
    # 0 corresponds to the same arrival time. Negative numbers indicate that the first detector detected first.
    # For instance, a coincidence event is stored as 2 detectorIds, denoting the arrival time at the first
    # detector t1 and the arrival time at the second detector t2, we store (t1-t2)*c/2.
    # Note: for non-TOF scanners, this defines the coincidence window
    # TODO: this currently assumes equal size for each TOF bin, but some scanners "stretch" TOF bins depending on length of LOR
    tofBinEdges: !array
      items: float
      dimensions: 1
    # TOF resolution (as FWHM) in mm
    # Scanner coincidence timing resolution (CTR) without tof-binning
    tofResolution: float

    # Edge information (in keV) for energy windows used for coincidences, triples etc
    # (given as from first to last edge, so there is one more edge than the number of bins)
    eventEnergyBinEdges: !array
      items: float
      dimensions: 1

    # FWHM of photopeak for incoming gamma of 511 keV, expressed as a ratio w.r.t. 511
    energyResolutionAt511: float

    # level at which the singles histograms are stored
    singlesHistogramLevel: SinglesHistogramLevelType

    # Edge information (in keV) for energy windows used for singles histograms
    # (given as from first to last edge, so there is one more edge than the number of bins)
    # In many cases, this could be the same as eventEnergyBinEdges, but is an independent field
    # for flexibility.
    # Constraint: (singlesHistogramLevel == SinglesHistogramLevelType.none && numberOfSinglesHistogramEnergyBins >= 1) ||
    #             (singlesHistogramLevel != SinglesHistogramLevelType.none && size(singlesHistogramEnergyBinEdges) == 0)
    singlesHistogramEnergyBinEdges: !array
      items: float
      dimensions: 1

    # Encode how the scanner handles multiple coincidences
    coincidencePolicy: CoincidencePolicy

    # a flag to indicate of delayed coincidences are recorded in the stream
    delayedCoincidencesAreStored: bool

    # a flag to indicate of triple events are recorded in the stream
    tripleEventsAreStored: bool

    # coincidence detection efficiencies
    detectionEfficiencies: DetectionEfficiencies

  computedFields:
    numberOfTOFBins: size(tofBinEdges)-1
    numberOfEventEnergyBins: size(eventEnergyBinEdges)-1
    numberOfSinglesHistogramEnergyBins: size(singlesHistogramEnergyBinEdges)-1
