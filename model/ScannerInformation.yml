# Type definition for how to encode how the scanner records single events (if it does).
SinglesPolicy: !enum
  values:
    # store all single events
    - all

    # only store those that are in coincidence with another single
    - rejectIfNotInCoincidence

# Type definition for how to encode how the scanner handles multiple coincidences when recording the prompts.
# Due to various effects (such as high count rate, prompt gammas), it is possible that multiple single
# events are detected within the coincidence window. This type encodes some different ways
# that this multiple events are handled, and recorded in the EventTimeBlock.promptEvents field.
CoincidencePolicy: !enum
  values:
    # multiples will be rejected (i.e., not stored in the EventTimeBlock.promptEvents field)
    - rejectMultiples

    # multiples will be stored as a sequence of all pairs, e.g. a triple leads to 3 pairs
    - multiplesAsAllCoincidences

    # multiples will be stored as a sequence of pairs, e.g. a triple leads to 2 pairs
    # (single1 and single2, single2 and single3)
    - multiplesAsSequentialCoincidences

    # other options, to be listed in the future
    - other


# Type definition for how to encode how the scanner handles higher order coincidences when recording the triples.
TripleEventPolicy: !enum
  values:
    # quadruples etc are not stored in the EventTimeBlock.tripleEvents field
    - rejectHigherMultiples

    # other options, to be listed in the future
    - other

# Type definition for how to encode how the scanner handles higher order coincidences when recording the quadruples.
QuadrupleEventPolicy: !enum
  values:
    # quadruples etc are not stored in the EventTimeBlock.tripleEvents field
    - rejectHigherMultiples

    # other options, to be listed in the future
    - other

# Type definition for how single histograms are stored.
# Many scanners are able to store singles accumulated in time intervals, i.e.
# histogrammed (as opposed to a list of singles with their corresponding DetectionBin).
# However, some scanners do not store this information at the smallest detector resolution.
# Therefore, PETSIRD currently supports a total singles count for each module as well.
# See SinglesHistogramTimeBlock.
SinglesHistogramLevelType: !enum
  values:
    # singles histograms are not stored at all
    - none
    # singles counts per module
    - module
    # singles counts for each DetectionBin
    - all

# Type definition for histogram bins specified in terms of edges
# Note that specifying edges allows having non-equal bin sizes.
# Edges have to be given from first (smallest) to last (largest).
# There is one more edge than the number of bins.
BinEdges: !record
  fields:
    edges: !array
      items: float
      dimensions: 1
  computedFields:
    numberOfBins: size(edges) - 1

ScannerInformation: !record
  fields:
    modelName: string

    # Geometric information for all detecting elements
    # All coordinates are in the PET gantry coordinate system.
    scannerGeometry: ScannerGeometry

    # List of materials present in the scanner geometry. The `material_id`s there will refer to the
    # identifiers in this list below.
    bulkMaterials: BulkMaterial*

    # Fixed transformation to reference location for this scanner.
    # This field can be used to encode alignment with the CT or MRI gantry for instance.
    # The transformation should convert from the PET gantry coordinate system to the reference.
    # An empty field implies the identity transformation.
    gantryAlignment: RigidTransformation?

    # Edge information for TOF bins in mm
    #
    # This is a nested vector with elements of type BinEdges, i.e. it specifies the edges for every module-pair
    # (actually pair of module-types).
    # To get the tof bin edges for 2 types of modules, use
    #  tofBinEdges[typeOfModule1][typeOfModule2]
    #
    # 0 corresponds to the same arrival time. Negative numbers indicate that the first detector detected first.
    # For instance, a coincidence event is stored as 2 detectionBins, denoting the arrival time at the first
    # detecting element t1 and the arrival time at the second detecting element t2, we store (t1-t2)*c/2.
    # Note: for non-TOF scanners (or module-types), this defines the coincidence window.
    # TODO: this currently assumes equal size for each TOF bin, but some scanners "stretch" TOF bins depending on length of LOR
    # Constraint: this 2D array has to be symmetric.
    # Constraint: size(tofBinEdges) == size(ScannerGeometry.replicatedModules)
    # Constraint: size(tofBinEdges[*]) == size(ScannerGeometry.replicatedModules)
    tofBinEdges: BinEdges**

    # TOF resolution aka CTR (as FWHM) in mm
    # To get the Coincidence Timing Resolution (CTR) in mm for 2 types of modules, use
    #  tofResolution[typeOfModule1][typeOfModule2]
    # Note that this specifies the CTR "before" tof-binning
    #
    # Constraint: this 2D array has to be symmetric.
    # Constraint: size(tofResolution) == size(ScannerGeometry.replicatedModules)
    # Constraint: size(tofResolution[*]) == size(ScannerGeometry.replicatedModules)
    tofResolution: float**

    # Edge information (in keV) for energy windows used for coincidences, triples etc
    #
    # This is a list of values for every module type.
    # Constraint: size(eventEnergyBinEdges) == size(ScannerGeometry.replicatedModules)
    eventEnergyBinEdges: BinEdges*

    # FWHM of photopeak for incoming gamma of 511 keV, expressed as a ratio w.r.t. 511
    #
    # This is a list of values for every module type.
    # Constraint: size(energyResolutionAt511) == size(ScannerGeometry.replicatedModules)
    energyResolutionAt511: float*

    # level at which the singles histograms are stored
    singlesHistogramLevel: SinglesHistogramLevelType

    # Edge information (in keV) for energy windows used for singles histograms
    #
    # This is a list of values for every module type.
    # In many cases, this could be the same as eventEnergyBinEdges, but is an independent field
    # for flexibility.
    # Constraint: (singlesHistogramLevel != SinglesHistogramLevelType.none
    #              && size(singlesHistogramEnergyBinEdges) >=  size(ScannerGeometry.replicatedModules)) ||
    #             (singlesHistogramLevel == SinglesHistogramLevelType.none && size(singlesHistogramEnergyBinEdges) == 0)
    singlesHistogramEnergyBinEdges: BinEdges*

    # Encode how the scanner handles single events in the EventTimeBlock.singleEvents field
    singlesPolicy: SinglesPolicy

    # Encode how the scanner handles multiple coincidences in the EventTimeBlock.promptEvents field
    coincidencePolicy: CoincidencePolicy

    # Encode how the scanner handles higher order coincidences in the EventTimeBlock.tripleEvents field
    # This field is ignored if tripleEventsAreStored == false.
    tripleEventPolicy: TripleEventPolicy

    # Encode how the scanner handles higher order coincidences in the EventTimeBlock.quadrupleEvents field
    # This field is ignored if quadrupleEventsAreStored == false.
    quadrupleEventPolicy: QuadrupleEventPolicy

    # a flag to indicate of single events are recorded in the stream (see EventTimeBlock)
    # Note that this is separate from the singlesHistogramLevel, where singles are histogrammed in a time-block.
    singleEventsAreStored: bool

    # a flag to indicate of prompt coincidences are recorded in the stream (see EventTimeBlock)
    promptCoincidencesAreStored: bool

    # a flag to indicate of delayed coincidences are recorded in the stream (see EventTimeBlock)
    delayedCoincidencesAreStored: bool

    # a flag to indicate of triple events are recorded in the stream (see EventTimeBlock)
    tripleEventsAreStored: bool

    # a flag to indicate of quadruple coincidences are recorded in the stream (see EventTimeBlock)
    quadrupleEventsAreStored: bool

    # coincidence detection efficiencies
    detectionEfficiencies: DetectionEfficiencies
