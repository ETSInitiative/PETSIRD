# A shape filled with a uniform material
SolidVolume<Shape>: !record
  fields:
    shape: Shape
    # identifier referring to `ScannerInformation.bulkMaterials` list
    materialId: uint

BoxSolidVolume: SolidVolume<BoxShape>
GenericSolidVolume: SolidVolume<GeometricShape>

# A list of identical SolidVolumes<BoxShape> at different locations
ReplicatedBoxSolidVolume: ReplicatedObject< BoxSolidVolume >

# A list of identical SolidVolumes<GeometricShape> at different locations
ReplicatedGenericSolidVolume: ReplicatedObject< GenericSolidVolume >

# Top-level detector structure, consisting of a group of (elementary) detecting elements (or "crystals")
# Note: all "crystals" have to be identical, aside from location. This includes properties such as
# shape, energy and timing resolution.
# This implies that for scanners with different types of detecting elements (e.g. phoswich detectors),
# different DetectorModules have to be used (see ScannerGeometry).
DetectorModule: !record
  fields:
    detectingElements: ReplicatedBoxSolidVolume
    # optional list describing shielding/optical reflectors etc
    nonDetectingElements: ReplicatedGenericSolidVolume*

# A list of identical modules at different locations
ReplicatedDetectorModule: ReplicatedObject< DetectorModule >

# Full definition of the geometry of the scanner, consisting of
# one of more types of modules replicated in space and (optional) other structures (e.g. side-shielding)
ScannerGeometry: !record
  fields:
    # list of different types of replicated modules
    # While most current clinical scanners have only one type of DetectorModule, some
    # would have different types, e.g. for scanners with phoswich detector, high resolution inserts, etc.
    # Constraint: numberOfReplicatedModules > 0
    replicatedModules: ReplicatedDetectorModule*
    # shielding etc
    nonDetectingVolumes: GenericSolidVolume*?
  computedFields:
    numberOfReplicatedModules: size(replicatedModules)

# This is the type for the index over "module-types".
# It is an unsigned integer that runs over all the types starting from 0.
#
# This index runs over ScannerGeometry.replicated_modules
TypeOfModule: uint

# This is a pair of 2 "module-types".
TypeOfModulePair: TypeOfModule*2

# This is the type for the index over "modules".
# It is an unsigned integer that runs over all the "modules" starting from 0.
#
# The correspondence between this integer and a module is not encoded in this model,
# but only in the "helpers".
# It corresponds to effectively incrementing the moduleIdx in nested loops:
# 1. ScannerGeometry.replicated_modules
# 2. replicated_module.transforms
# (with the moduleIdx running faster over the 2nd loop)
ModuleIdx: uint

# This is the type for the index over "detection elements" (aka "crystals"), e.g. used in `DetectionBin`
# It is an unsigned integer that runs over all the "detector elements" starting from 0.
#
# The correspondence between this integer and a module/det_el is not encoded in this model,
# but only in the "helpers".
# It corresponds to effectively incrementing the detElIdx in nested loops:
# 1. ScannerGeometry.replicated_modules
# 2. replicated_module.transforms
# 3. replicated_module.detecting_elements.transforms
# (with the detElIdx running faster over the 3rd loop)
DetElIdx: uint

# type for a "single" detection, used in `CoincidenceEvent` and `TripleEvent`.
DetectionBin: !record
  fields:
    # the elementary detector element, see DetElIdx
    detElIdx: DetElIdx
    # index (starting from 0) for the energy window
    # See the ScannerInformation.eventEnergyBinEdges field
    energyIdx: uint
