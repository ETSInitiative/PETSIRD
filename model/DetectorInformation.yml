# A shape filled with a uniform material
SolidVolume<Shape>: !record
  fields:
    shape: Shape
    # identifier referring to `ScannerInformation.bulkMaterials` list
    materialId: uint

BoxSolidVolume: SolidVolume<BoxShape>
GenericSolidVolume: SolidVolume<GeometricShape>

# A list of identical SolidVolumes<BoxShape> at different locations
ReplicatedBoxSolidVolume: ReplicatedObject< BoxSolidVolume >

# A list of identical SolidVolumes<BGeometricShape> at different locations
ReplicatedGenericSolidVolume: ReplicatedObject< GenericSolidVolume >

# Top-level detector structure, consisting of one or more lists of detecting elements (or "crystals")
# This allows having different types of detecting elements (e.g. for phoswich detectors)
DetectorModule: !record
  fields:
    detectingElements: ReplicatedBoxSolidVolume*
    # list of unique ids for every replicated solid volume
    # constraint: size(detectingElements) == size(detectingElementsIds)
    detectingElementIds: uint*
    # optional list describing shielding/optical reflectors etc
    nonDetectingElements: ReplicatedGenericSolidVolume*

# A list of identical modules at different locations
ReplicatedDetectorModule: ReplicatedObject< DetectorModule >

# Full definition of the geometry of the scanner, consisting of
# one of more types of modules replicated in space and (optional) other structures (e.g. side-shielding)
ScannerGeometry: !record
  fields:
    # list of different types of replicated modules
    replicatedModules: ReplicatedDetectorModule*
    # list of unique ids for every replicated module
    # constraint: size(replicated_modules) == size(ids)
    ids: uint*
    # shielding etc
    nonDetectingVolumes: GenericSolidVolume*?


# This is the type for the index over "modules".
# It is an unsigned integer that runs over all the "modules" starting from 0.
#
# The correspondence between this integer and a module is not encoded in this model,
# but only in the "helpers".
# It corresponds to effectively incrementing the moduleIdx in nested loops:
# 1. ScannerGeometry.replicated_modules
# 2. replicated_module.transforms
# (with the moduleIdx running faster over the 2nd loop)
ModuleIdx: uint

# This is the type for the index over "detection elements" (aka "crystals"), e.g. used in `DetectionBin`
# It is an unsigned integer that runs over all the "detector elements" starting from 0.
#
# The correspondence between this integer and a module/det_el is not encoded in this model,
# but only in the "helpers".
# It corresponds to effectively incrementing the detElIdx in nested loops:
# 1. ScannerGeometry.replicated_modules
# 2. replicated_module.transforms
# 3. replicated_module.detecting_elements
# 4. detecting_element.transforms
# (with the detElIdx running faster over the 4th loop)
DetElIdx: uint

# type for a "single" detection, used in `CoincidenceEvent` and `TripleEvent`.
DetectionBin: !record
  fields:
    # the elementary detector element, see DetElIdx
    detElIdx: DetElIdx
    # index (starting from 0) for the energy window
    # See the ScannerInformation.eventEnergyBinEdges field
    energyIdx: uint
